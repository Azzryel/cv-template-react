{"version":3,"sources":["Components/GeneralInfo.js","Components/EducationInfo.js","Components/PracticalExp.js","App.js","index.js"],"names":["GeneralInfo","state","name","surname","email","phone","toggleEdit","toggle","bind","submitForm","handleChange","this","setState","e","preventDefault","target","value","className","onClick","onSubmit","htmlFor","type","onChange","required","pattern","Component","EducationInfo","school","degree","enrolled","graduated","PracticalExp","jobs","company","position","jobDescr","dateFrom","dateUntil","addMore","icon","toggleAdd","clearForm","obj","concat","isEmpty","length","Boolean","CompanyCard","companies","props","map","indexOf","App","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6c8d357.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../styles/GeneralInfo.css\";\n\nclass GeneralInfo extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            name: '',\n            surname: '',\n            email: '',\n            phone: '',\n            toggleEdit: false,\n        };\n\n        this.toggle = this.toggle.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            toggleEdit: this.state.toggleEdit ? false : true,\n        });\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n        this.toggle();\n    }\n\n    handleChange(e) {\n        let name = e.target.name;\n        let value = e.target.value;\n\n        this.setState({\n            [name]: value,\n        });\n \n    }\n\n\n    render() {\n        return (\n            <div className=\"grid-item item1\">\n                {!this.state.toggleEdit ? (\n                    <div className=\"general\">\n                        <form onSubmit={this.submitForm}>\n                            <label className=\"form-label\" htmlFor=\"name\"  > Name: </label>\n                            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.name} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"surname\"  > Surname: </label>\n                            <input type=\"text\" name=\"surname\" onChange={this.handleChange} value={this.state.surname} required/>\n                            <br/>\n                            <label className=\"form-label\"  htmlFor=\"mail\" > e-mail: </label>\n                            <input type=\"email\"  name=\"email\" onChange={this.handleChange} value={this.state.email} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"phone\" > Phone number: </label>\n                            <input type=\"phone\" name=\"phone\" pattern=\"[0-9]{9}\" onChange={this.handleChange} value={this.state.phone} required/>\n                            <br/><br/>\n                            <button className=\"button\" type=\"submit\" > <i className=\"fa fa-plus\"></i> </button>\n                        </form>\n                    </div>\n                ) : (\n\n                    <div className=\"general\">\n                        <br/>\n                        <span> Name: </span> <span className=\"info\">{this.state.name}</span>\n                        <br/><br/>\n                        <span> Surname: </span> <span className=\"info\">{this.state.surname}</span>\n                        <br/><br/>\n                        <span> e-mail: </span> <span className=\"info\">{this.state.email}</span>\n                        <br/><br/>\n                        <span> Phone number: </span> <span className=\"info\">{this.state.phone}</span>\n                        <br/><br/><br/>\n                        <button className=\"button\" onClick={this.toggle}> <i className=\"fa fa-edit\"></i> </button>\n                    </div>\n                    \n                    \n                )\n\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default GeneralInfo;","import React, { Component } from \"react\";\nimport \"../styles/EducationInfo.css\";\n\nclass EducationInfo extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            school: \"\",\n            degree: \"\",\n            enrolled: \"\",\n            graduated: \"\",\n            toggleEdit: false,\n        }\n\n        this.toggle = this.toggle.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    toggle() {\n        this.setState({\n            toggleEdit: this.state.toggleEdit ? false : true,\n        });\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n        this.toggle();\n    }\n\n    handleChange(e) {\n        let name = e.target.name;\n        let value = e.target.value;\n\n        this.setState({\n            [name]: value,\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"grid-item item2\"> <h5 className=\"title\"> Education </h5>\n                {!this.state.toggleEdit ? (\n                    <div className=\"education\">\n                        <form onSubmit={this.submitForm}>\n                            <label className=\"form-label\" htmlFor=\"school\"> School: </label>\n                            <input type=\"text\" name=\"school\" onChange={this.handleChange} value={this.state.school} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"degree\"> Degree: </label>\n                            <input type=\"text\" name=\"degree\" onChange={this.handleChange} value={this.state.degree} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"enrolled\"> Date enrolled: </label>\n                            <input type=\"date\" name=\"enrolled\" onChange={this.handleChange} value={this.state.enrolled} required/> \n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"graduated\"> Date graduated: </label>\n                            <input type=\"date\" name=\"graduated\" onChange={this.handleChange} value={this.state.graduated} required/> \n                            <br/><br/>\n                            <button className=\"button\" type=\"submit\" > <i className=\"fa fa-plus\"></i> </button>\n                        </form>\n                    </div>\n                ) : (\n                    <div className=\"education\">\n                        <br/>\n                        <span> School: </span> <strong>{this.state.school}</strong>\n                        <br/><br/>\n                        <span> Degree: </span> <strong>{this.state.degree}</strong>\n                        <br/><br/>\n                        <span> Date: </span> <span className=\"date\">{this.state.enrolled}</span>\n                        <br/>                <span className=\"date\">{this.state.graduated}</span>\n                        <br/><br/><br/>\n                        <button className=\"button\" onClick={this.toggle}> <i className=\"fa fa-edit\"></i> </button>\n                    \n                    </div>\n                )\n            }\n\n            </div>\n        )\n    }\n}\n\n\nexport default EducationInfo;","import React, { Component } from \"react\";\nimport \"../styles/PracticalExp.css\";\n\nclass PracticalExp extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            jobs: [],\n            company: {\n                name: \"\",\n                position: \"\",\n                jobDescr: \"\",\n                dateFrom: \"\",\n                dateUntil: \"\",\n            },\n            addMore: false,\n            icon: \"fa fa-plus-square\",\n        }\n\n        this.toggleAdd = this.toggleAdd.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n    }\n\n    toggleAdd() {\n        this.setState({\n        addMore: this.state.addMore ? false : true,\n        icon: (this.state.icon === \"fa fa-plus-square\") ? \"fa fa-window-close\" : \"fa fa-plus-square\",\n        })\n        this.clearForm();\n    }\n\n    clearForm() {\n        if(this.state.icon === \"fa fa-plus-square\") {\n            this.setState({\n                company: {\n                    name: \"\",\n                    position: \"\",\n                    jobDescr: \"\",\n                    dateFrom: \"\",\n                    dateUntil: \"\",\n                },\n            })\n        }\n    }\n\n    submitForm(e){\n        e.preventDefault();\n        let obj = this.state.company;\n\n        this.setState({\n            jobs: this.state.jobs.concat(obj),\n        })\n        this.toggleAdd();\n    }\n\n    handleChange(e){\n        let name = e.target.name;\n        let value = e.target.value;\n        \n        this.setState({\n            company: {\n                ...this.state.company,\n                [name]: value,\n            },\n        });\n\n    }\n\n    render() {\n        const isEmpty = this.state.jobs.length;\n\n        return (\n            <div className =\"grid-item item3\" > <h5 className=\"title\">Work Exp</h5>\n                 <button className=\"addBtn\" onClick={this.toggleAdd} > <i className={this.state.icon}></i> </button>\n                {this.state.addMore ? ( \n                    <div className=\"practical\">\n                        <form onSubmit={this.submitForm}>\n                            <label className=\"form-label\" htmlFor=\"name\">Company name:</label>\n                            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.company.name} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Job position:</label>\n                            <input type=\"text\" name=\"position\" onChange={this.handleChange} value={this.state.company.position} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Job description:</label>\n                            <br/>\n                            <textarea name=\"jobDescr\" onChange={this.handleChange} value={this.state.company.jobDescr} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Started work:</label>\n                            <input type=\"date\" name=\"dateFrom\" onChange={this.handleChange} value={this.state.company.dateFrom} />\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Quit work:</label>\n                            <input type=\"date\" name=\"dateUntil\" onChange={this.handleChange} value={this.state.company.dateUntil} />\n                            <br/><br/>\n                            <button type=\"submit\" > <i className=\"fa fa-plus\"></i> </button>\n                        </form>\n                    </div>\n                ) : (\n                    <div className=\"none\"> </div>\n                )\n                }\n            { Boolean(isEmpty) ? (\n                <CompanyCard jobs={this.state.jobs}></CompanyCard>\n            ) : (\n                <div className=\"none\"> </div>\n            )}\n            </div>\n        )\n    }\n}\n\n\nclass CompanyCard extends Component {\n\n\n    render() {\n        const companies = this.props.jobs;\n        \n        return (\n            <div className=\"company-container practicsl\"> \n                {companies.map(company => {\n                    return (\n                        <div key={companies.indexOf(company)} className=\"company-card\">\n                            <span>Company:</span> <span className=\"card-display\"> {company.name} </span>   \n                            <br/><br/>\n                            <span>Job position:</span> <span className=\"card-display\"> {company.position} </span>   \n                            <br/><br/>\n                            <span>Job description:</span> <p className=\"card-display description\"> {company.jobDescr} </p>   \n                            <br/><br/>\n                            <br/><br/>\n                            <br/><br/>\n                            {!!(Boolean(company.dateFrom)) ? (\n                                <p>\n                                    <span>Started:</span> <span className=\"card-display\"> {company.dateFrom} </span>\n                                </p>\n                            ) : (\n                                <span className=\"none\">  </span >\n                            ) }\n                            {!!(Boolean(company.dateUntil)) ? (\n                                <p>\n                                    <span>Until:</span> <span className=\"card-display\"> {company.dateUntil} </span>\n                                </p>\n                            ) : (\n                                <span className=\"none\">  </span>\n                            ) }\n\n                        </div>\n                    )\n                  \n                })\n                }\n                \n            </div>\n        )\n    }\n\n}\n\nexport {PracticalExp};","import React, { Component } from \"react\";\nimport GeneralInfo from \"./Components/GeneralInfo\";\nimport EducationInfo from \"./Components/EducationInfo\";\nimport { PracticalExp } from \"./Components/PracticalExp\";\nimport \"./styles/reset.css\";\nimport \"./styles/App.css\";\n\nclass App extends Component {\n\n \n  render() {\n    return (\n      <div id=\"container\">\n      <div id=\"grid\">\n        <GeneralInfo></GeneralInfo>\n\n        <EducationInfo></EducationInfo>\n        \n        <PracticalExp></PracticalExp>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}