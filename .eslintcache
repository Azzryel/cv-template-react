[{"/home/azryel/odin_on_rails/cv-project/src/index.js":"1","/home/azryel/odin_on_rails/cv-project/src/App.js":"2","/home/azryel/odin_on_rails/cv-project/src/Components/GeneralInfo.js":"3","/home/azryel/odin_on_rails/cv-project/src/Components/EducationInfo.js":"4","/home/azryel/odin_on_rails/cv-project/src/Components/PracticalExp.js":"5"},{"size":197,"mtime":1612211293495,"results":"6","hashOfConfig":"7"},{"size":593,"mtime":1612380414784,"results":"8","hashOfConfig":"7"},{"size":3027,"mtime":1612365565790,"results":"9","hashOfConfig":"7"},{"size":2967,"mtime":1612297617291,"results":"10","hashOfConfig":"7"},{"size":5543,"mtime":1612372761598,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"hqxd3t",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/azryel/odin_on_rails/cv-project/src/index.js",[],["24","25"],"/home/azryel/odin_on_rails/cv-project/src/App.js",["26"],"/home/azryel/odin_on_rails/cv-project/src/Components/GeneralInfo.js",[],"/home/azryel/odin_on_rails/cv-project/src/Components/EducationInfo.js",[],"/home/azryel/odin_on_rails/cv-project/src/Components/PracticalExp.js",["27","28","29"],"import React, { Component } from \"react\";\n\nclass PracticalExp extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            jobs: [],\n            company: {\n                name: \"\",\n                position: \"\",\n                jobDescr: \"\",\n                dateFrom: \"\",\n                dateUntil: \"\",\n            },\n            addMore: false,\n            icon: \"fa fa-plus-square\",\n        }\n\n        this.toggleAdd = this.toggleAdd.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.clearForm = this.clearForm.bind(this);\n    }\n\n    toggleAdd() {\n        this.setState({\n        addMore: this.state.addMore ? false : true,\n        icon: (this.state.icon == \"fa fa-plus-square\") ? \"fa fa-window-close\" : \"fa fa-plus-square\",\n        })\n        this.clearForm();\n    }\n\n    clearForm() {\n        if(this.state.icon == \"fa fa-plus-square\") {\n            this.setState({\n                company: {\n                    name: \"\",\n                    position: \"\",\n                    jobDescr: \"\",\n                    dateFrom: \"\",\n                    dateUntil: \"\",\n                },\n            })\n        }\n    }\n\n    submitForm(e){\n        e.preventDefault();\n        let obj = this.state.company;\n\n        this.setState({\n            jobs: this.state.jobs.concat(obj),\n        })\n        this.toggleAdd();\n    }\n\n    handleChange(e){\n        let name = e.target.name;\n        let value = e.target.value;\n        \n        this.setState({\n            company: {\n                ...this.state.company,\n                [name]: value,\n            },\n        });\n\n    }\n\n    render() {\n        const isEmpty = this.state.jobs.length;\n\n        return (\n            <div className =\"grid-item item3\" >\n                <h5>Work Exp</h5> <button onClick={this.toggleAdd} > <i className={this.state.icon}></i> </button>\n                {this.state.addMore ? ( \n                    <div>\n                        <form onSubmit={this.submitForm}>\n                            <label className=\"form-label\" htmlFor=\"name\">Company name:</label>\n                            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.company.name} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Job position:</label>\n                            <input type=\"text\" name=\"position\" onChange={this.handleChange} value={this.state.company.position} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Job description:</label>\n                            <br/>\n                            <textarea name=\"jobDescr\" onChange={this.handleChange} value={this.state.company.jobDescr} required/>\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Started work:</label>\n                            <input type=\"date\" name=\"dateFrom\" onChange={this.handleChange} value={this.state.company.dateFrom} />\n                            <br/>\n                            <label className=\"form-label\" htmlFor=\"name\">Quit work:</label>\n                            <input type=\"date\" name=\"dateUntil\" onChange={this.handleChange} value={this.state.company.dateUntil} />\n                            <br/><br/>\n                            <button type=\"submit\" > <i className=\"fa fa-plus\"></i> </button>\n                        </form>\n                    </div>\n                ) : (\n                    <div className=\"none\"> </div>\n                )\n                }\n            { Boolean(isEmpty) ? (\n                <CompanyCard jobs={this.state.jobs}></CompanyCard>\n            ) : (\n                <div className=\"none\"> </div>\n            )}\n            </div>\n        )\n    }\n}\n\n\nclass CompanyCard extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const companies = this.props.jobs;\n        \n        return (\n            <div className=\"company-container\"> \n                {companies.map(company => {\n                    return (\n                        <div key={companies.indexOf(company)} className=\"company-card\">\n                            <span>Company:</span> <span> {company.name} </span>   \n                            <br/>\n                            <span>Job position:</span> <span> {company.position} </span>   \n                            <br/>\n                            <span>Job description:</span> <p> {company.jobDescr} </p>   \n                            <br/>\n                            {!!(Boolean(company.dateFrom)) ? (\n                                <p>\n                                    <span>Started:</span> <span> {company.dateFrom} </span>\n                                </p>\n                            ) : (\n                                <span className=\"none\">  </span>\n                            ) }\n                            {!!(Boolean(company.dateUntil)) ? (\n                                <p>\n                                    <span>Until:</span> <span> {company.dateUntil} </span>\n                                </p>\n                            ) : (\n                                <span className=\"none\">  </span>\n                            ) }\n\n                        </div>\n                    )\n                  \n                })\n                }\n                \n            </div>\n        )\n    }\n\n}\n\nexport {PracticalExp};",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":9,"column":3,"nodeType":"36","messageId":"37","endLine":12,"endColumn":4},{"ruleId":"38","severity":1,"message":"39","line":29,"column":32,"nodeType":"40","messageId":"41","endLine":29,"endColumn":34},{"ruleId":"38","severity":1,"message":"39","line":35,"column":28,"nodeType":"40","messageId":"41","endLine":35,"endColumn":30},{"ruleId":"34","severity":1,"message":"35","line":115,"column":5,"nodeType":"36","messageId":"37","endLine":118,"endColumn":6},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]